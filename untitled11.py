# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l7RFbOX2tyyWPRupyfFe5CqlUZlEQwLZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.stattools import adfuller

# For reproducibility
np.random.seed(42)

# Load the dataset
data = pd.read_csv('industrial_production.csv', parse_dates=['Date'], index_col='Date')

# Visualize the time series data
plt.figure(figsize=(10, 6))
plt.plot(data, label='Industrial Production')
plt.title('Industrial Production Over Time')
plt.xlabel('Date')
plt.ylabel('Production')
plt.legend()
plt.show()

# Check for stationarity using the Augmented Dickey-Fuller test
result = adfuller(data['Production'])
print('ADF Statistic:', result[0])
print('p-value:', result[1])

# Differencing to make the data stationary if necessary
if result[1] > 0.05:
    data_diff = data.diff().dropna()
    result = adfuller(data_diff['Production'])
    print('ADF Statistic after differencing:', result[0])
    print('p-value after differencing:', result[1])
    data_to_use = data_diff
else:
    data_to_use = data

# Split the data into train and test sets
train_size = int(len(data) * 0.8)
train, test = data_to_use[0:train_size], data_to_use[train_size:]

plt.figure(figsize=(10, 6))
plt.plot(train, label='Train')
plt.plot(test, label='Test')
plt.title('Train and Test Data')
plt.xlabel('Date')
plt.ylabel('Production')
plt.legend()
plt.show()

# Fit ARIMA model
arima_model = ARIMA(train, order=(5,1,0))
arima_result = arima_model.fit()
print(arima_result.summary())

# Forecast using ARIMA
arima_forecast = arima_result.forecast(steps=len(test))

# Plot the ARIMA results
plt.figure(figsize=(10, 6))
plt.plot(train, label='Train')
plt.plot(test, label='Test')
plt.plot(test.index, arima_forecast, label='ARIMA Forecast')
plt.title('ARIMA Forecast')
plt.xlabel('Date')
plt.ylabel('Production')
plt.legend()
plt.show()

# Calculate ARIMA error
arima_error = mean_squared_error(test, arima_forecast)
print(f'ARIMA Model Mean Squared Error: {arima_error}')

# Fit SARIMA model
sarima_model = SARIMAX(train, order=(1,1,1), seasonal_order=(1,1,1,12))
sarima_result = sarima_model.fit()
print(sarima_result.summary())

# Forecast using SARIMA
sarima_forecast = sarima_result.forecast(steps=len(test))

# Plot the SARIMA results
plt.figure(figsize=(10, 6))
plt.plot(train, label='Train')
plt.plot(test, label='Test')
plt.plot(test.index, sarima_forecast, label='SARIMA Forecast')
plt.title('SARIMA Forecast')
plt.xlabel('Date')
plt.ylabel('Production')
plt.legend()
plt.show()

# Calculate SARIMA error
sarima_error = mean_squared_error(test, sarima_forecast)
print(f'SARIMA Model Mean Squared Error: {sarima_error}')

# Compare errors and choose the best model
best_model = 'SARIMA' if sarima_error < arima_error else 'ARIMA'
print(f'The best model is: {best_model}')

# Forecast for the next 2 years (assuming monthly data, so 24 steps)
if best_model == 'SARIMA':
    future_forecast = sarima_result.forecast(steps=24)
else:
    future_forecast = arima_result.forecast(steps=24)

# Plot the future forecast
plt.figure(figsize=(10, 6))
plt.plot(data, label='Historical Data')
plt.plot(pd.date_range(start=data.index[-1], periods=25, freq='M')[1:], future_forecast, label='Future Forecast')
plt.title('Future Forecast for Industrial Production')
plt.xlabel('Date')
plt.ylabel('Production')
plt.legend()
plt.show()